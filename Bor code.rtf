{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red79\green123\blue61;\red26\green26\blue41;\red172\green172\blue193;
\red70\green137\blue204;\red212\green212\blue212;\red167\green197\blue152;\red45\green175\blue118;\red31\green133\blue64;
\red253\green181\blue13;\red13\green102\blue149;\red187\green97\blue44;\red14\green86\blue166;\red237\green114\blue173;
\red140\green108\blue11;}
{\*\expandedcolortbl;;\cssrgb\c37647\c54510\c30588;\cssrgb\c13333\c13725\c21176;\cssrgb\c72941\c73333\c80000;
\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c86275;\cssrgb\c70980\c80784\c65882;\cssrgb\c19608\c72941\c53725;\cssrgb\c12941\c58039\c31765;
\cssrgb\c100000\c75686\c2745;\cssrgb\c0\c47843\c65098;\cssrgb\c78824\c45882\c22353;\cssrgb\c3137\c42353\c70980;\cssrgb\c95294\c54118\c73333;
\cssrgb\c61961\c49412\c3137;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // SPDX-License-Identifier: MIT\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 pragma\cf4 \strokec4  \cf5 \strokec5 solidity\cf4 \strokec4  \cf6 \strokec6 ^\cf7 \strokec7 0.4.24\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 library\cf4 \strokec4  SafeMath \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  mul\cf6 \strokec6 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 a \cf6 \strokec6 ==\cf4 \strokec4  \cf7 \strokec7 0\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3       \cf9 \strokec9 return\cf4 \strokec4  \cf7 \strokec7 0\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  c \cf6 \strokec6 =\cf4 \strokec4  a \cf6 \strokec6 *\cf4 \strokec4  b\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 assert\cf6 \strokec6 (\cf4 \strokec4 c \cf6 \strokec6 /\cf4 \strokec4  a \cf6 \strokec6 ==\cf4 \strokec4  b\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  c\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  div\cf6 \strokec6 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 // assert(b > 0); // Solidity automatically throws when dividing by 0\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  c \cf6 \strokec6 =\cf4 \strokec4  a \cf6 \strokec6 /\cf4 \strokec4  b\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 // assert(a == b * c + a % b); // There is no case in which this doesn't hold\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  c\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  sub\cf6 \strokec6 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 assert\cf6 \strokec6 (\cf4 \strokec4 b \cf6 \strokec6 <=\cf4 \strokec4  a\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  a \cf6 \strokec6 -\cf4 \strokec4  b\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  add\cf6 \strokec6 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  c \cf6 \strokec6 =\cf4 \strokec4  a \cf6 \strokec6 +\cf4 \strokec4  b\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 assert\cf6 \strokec6 (\cf4 \strokec4 c \cf6 \strokec6 >=\cf4 \strokec4  a\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  c\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  Ownable \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  owner\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\
\cb3   \cf5 \strokec5 event\cf4 \strokec4  OwnershipTransferred\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  \cf10 \strokec10 indexed\cf4 \strokec4  previousOwner\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf10 \strokec10 indexed\cf4 \strokec4  newOwner\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @dev Throws if called by any account other than the owner.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 modifier\cf4 \strokec4  onlyOwner\cf6 \strokec6 ()\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender \cf6 \strokec6 ==\cf4 \strokec4  owner\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     _\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @dev Allows the current owner to transfer control of the contract to a newOwner.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @param newOwner The address to transfer ownership to.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  transferOwnership\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  newOwner\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  onlyOwner \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (\cf4 \strokec4 newOwner \cf6 \strokec6 !=\cf4 \strokec4  \cf5 \strokec5 address\cf6 \strokec6 (\cf7 \strokec7 0\cf6 \strokec6 ));\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 emit\cf4 \strokec4  OwnershipTransferred\cf6 \strokec6 (\cf4 \strokec4 owner\cf6 \strokec6 ,\cf4 \strokec4  newOwner\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     owner \cf6 \strokec6 =\cf4 \strokec4  newOwner\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  Pausable \cf5 \strokec5 is\cf4 \strokec4  Ownable \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 event\cf4 \strokec4  Pause\cf6 \strokec6 ();\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 event\cf4 \strokec4  Unpause\cf6 \strokec6 ();\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 bool\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  paused \cf6 \strokec6 =\cf4 \strokec4  \cf5 \strokec5 false\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @dev Modifier to make a function callable only when the contract is not paused.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 modifier\cf4 \strokec4  whenNotPaused\cf6 \strokec6 ()\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (!\cf4 \strokec4 paused\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     _\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @dev Modifier to make a function callable only when the contract is paused.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 modifier\cf4 \strokec4  whenPaused\cf6 \strokec6 ()\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (\cf4 \strokec4 paused\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     _\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @dev called by the owner to pause, triggers stopped state\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  pause\cf6 \strokec6 ()\cf4 \strokec4  onlyOwner whenNotPaused \cf8 \strokec8 public\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     paused \cf6 \strokec6 =\cf4 \strokec4  \cf5 \strokec5 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 emit\cf4 \strokec4  Pause\cf6 \strokec6 ();\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    * @dev called by the owner to unpause, returns to normal state\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2    */\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  unpause\cf6 \strokec6 ()\cf4 \strokec4  onlyOwner whenPaused \cf8 \strokec8 public\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     paused \cf6 \strokec6 =\cf4 \strokec4  \cf5 \strokec5 false\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 emit\cf4 \strokec4  Unpause\cf6 \strokec6 ();\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  ERC20Basic \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  totalSupply\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  balanceOf\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  who\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  transfer\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  to\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 event\cf4 \strokec4  Transfer\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  \cf10 \strokec10 indexed\cf4 \strokec4  from\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf10 \strokec10 indexed\cf4 \strokec4  to\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  ERC20 \cf5 \strokec5 is\cf4 \strokec4  ERC20Basic \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  allowance\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  owner\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  spender\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  transferFrom\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  from\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  approve\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 event\cf4 \strokec4  Approval\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  \cf10 \strokec10 indexed\cf4 \strokec4  owner\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf10 \strokec10 indexed\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  StandardToken \cf5 \strokec5 is\cf4 \strokec4  ERC20 \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 using\cf4 \strokec4  SafeMath \cf12 \strokec12 for\cf4 \strokec4  \cf5 \strokec5 uint256\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 mapping\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 mapping\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 uint256\cf6 \strokec6 ))\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  allowed\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 mapping\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  tokenBlacklist\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Blacklist\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  \cf10 \strokec10 indexed\cf4 \strokec4  blackListed\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 bool\cf4 \strokec4  value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\
\cb3   \cf5 \strokec5 mapping\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 uint256\cf6 \strokec6 )\cf4 \strokec4  balances\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  transfer\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _to\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  _value\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (\cf4 \strokec4 tokenBlacklist\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 ==\cf4 \strokec4  \cf5 \strokec5 false\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (\cf4 \strokec4 _to \cf6 \strokec6 !=\cf4 \strokec4  \cf5 \strokec5 address\cf6 \strokec6 (\cf7 \strokec7 0\cf6 \strokec6 ));\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (\cf4 \strokec4 _value \cf6 \strokec6 <=\cf4 \strokec4  balances\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ]);\cf4 \cb1 \strokec4 \
\
\cb3     \cf2 \strokec2 // SafeMath.sub will throw if there is not enough balance.\cf4 \cb1 \strokec4 \
\cb3     balances\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  balances\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ].\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     balances\cf6 \strokec6 [\cf4 \strokec4 _to\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  balances\cf6 \strokec6 [\cf4 \strokec4 _to\cf6 \strokec6 ].\cf4 \strokec4 add\cf6 \strokec6 (\cf4 \strokec4 _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 emit\cf4 \strokec4  Transfer\cf6 \strokec6 (\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ,\cf4 \strokec4  _to\cf6 \strokec6 ,\cf4 \strokec4  _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf5 \strokec5 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  balanceOf\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _owner\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf4 \strokec4  balance\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  balances\cf6 \strokec6 [\cf4 \strokec4 _owner\cf6 \strokec6 ];\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  transferFrom\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _from\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  _to\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  _value\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (\cf4 \strokec4 tokenBlacklist\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 ==\cf4 \strokec4  \cf5 \strokec5 false\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (\cf4 \strokec4 _to \cf6 \strokec6 !=\cf4 \strokec4  \cf5 \strokec5 address\cf6 \strokec6 (\cf7 \strokec7 0\cf6 \strokec6 ));\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (\cf4 \strokec4 _value \cf6 \strokec6 <=\cf4 \strokec4  balances\cf6 \strokec6 [\cf4 \strokec4 _from\cf6 \strokec6 ]);\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (\cf4 \strokec4 _value \cf6 \strokec6 <=\cf4 \strokec4  allowed\cf6 \strokec6 [\cf4 \strokec4 _from\cf6 \strokec6 ][\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ]);\cf4 \cb1 \strokec4 \
\
\cb3     balances\cf6 \strokec6 [\cf4 \strokec4 _from\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  balances\cf6 \strokec6 [\cf4 \strokec4 _from\cf6 \strokec6 ].\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     balances\cf6 \strokec6 [\cf4 \strokec4 _to\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  balances\cf6 \strokec6 [\cf4 \strokec4 _to\cf6 \strokec6 ].\cf4 \strokec4 add\cf6 \strokec6 (\cf4 \strokec4 _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     allowed\cf6 \strokec6 [\cf4 \strokec4 _from\cf6 \strokec6 ][\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  allowed\cf6 \strokec6 [\cf4 \strokec4 _from\cf6 \strokec6 ][\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ].\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 emit\cf4 \strokec4  Transfer\cf6 \strokec6 (\cf4 \strokec4 _from\cf6 \strokec6 ,\cf4 \strokec4  _to\cf6 \strokec6 ,\cf4 \strokec4  _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf5 \strokec5 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  approve\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _spender\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  _value\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     allowed\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ][\cf4 \strokec4 _spender\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  _value\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 emit\cf4 \strokec4  Approval\cf6 \strokec6 (\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ,\cf4 \strokec4  _spender\cf6 \strokec6 ,\cf4 \strokec4  _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf5 \strokec5 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  allowance\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _owner\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  _spender\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  allowed\cf6 \strokec6 [\cf4 \strokec4 _owner\cf6 \strokec6 ][\cf4 \strokec4 _spender\cf6 \strokec6 ];\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  increaseApproval\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _spender\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  _addedValue\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     allowed\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ][\cf4 \strokec4 _spender\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  allowed\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ][\cf4 \strokec4 _spender\cf6 \strokec6 ].\cf4 \strokec4 add\cf6 \strokec6 (\cf4 \strokec4 _addedValue\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 emit\cf4 \strokec4  Approval\cf6 \strokec6 (\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ,\cf4 \strokec4  _spender\cf6 \strokec6 ,\cf4 \strokec4  allowed\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ][\cf4 \strokec4 _spender\cf6 \strokec6 ]);\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf5 \strokec5 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  decreaseApproval\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _spender\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  _subtractedValue\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint\cf4 \strokec4  oldValue \cf6 \strokec6 =\cf4 \strokec4  allowed\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ][\cf4 \strokec4 _spender\cf6 \strokec6 ];\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 _subtractedValue \cf6 \strokec6 >\cf4 \strokec4  oldValue\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3       allowed\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ][\cf4 \strokec4 _spender\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf7 \strokec7 0\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \strokec4  \cf10 \strokec10 else\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3       allowed\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ][\cf4 \strokec4 _spender\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  oldValue\cf6 \strokec6 .\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 _subtractedValue\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 emit\cf4 \strokec4  Approval\cf6 \strokec6 (\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ,\cf4 \strokec4  _spender\cf6 \strokec6 ,\cf4 \strokec4  allowed\cf6 \strokec6 [\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ][\cf4 \strokec4 _spender\cf6 \strokec6 ]);\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf5 \strokec5 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  _blackList\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _address\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 bool\cf4 \strokec4  _isBlackListed\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 require\cf6 \strokec6 (\cf4 \strokec4 tokenBlacklist\cf6 \strokec6 [\cf4 \strokec4 _address\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 !=\cf4 \strokec4  _isBlackListed\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     tokenBlacklist\cf6 \strokec6 [\cf4 \strokec4 _address\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  _isBlackListed\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 emit\cf4 \strokec4  Blacklist\cf6 \strokec6 (\cf4 \strokec4 _address\cf6 \strokec6 ,\cf4 \strokec4  _isBlackListed\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf5 \strokec5 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\
\
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  PausableToken \cf5 \strokec5 is\cf4 \strokec4  StandardToken\cf6 \strokec6 ,\cf4 \strokec4  Pausable \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  transfer\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _to\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  _value\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  whenNotPaused \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf13 \strokec13 super\cf6 \strokec6 .\cf4 \strokec4 transfer\cf6 \strokec6 (\cf4 \strokec4 _to\cf6 \strokec6 ,\cf4 \strokec4  _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  transferFrom\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _from\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  _to\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  _value\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  whenNotPaused \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf13 \strokec13 super\cf6 \strokec6 .\cf4 \strokec4 transferFrom\cf6 \strokec6 (\cf4 \strokec4 _from\cf6 \strokec6 ,\cf4 \strokec4  _to\cf6 \strokec6 ,\cf4 \strokec4  _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  approve\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _spender\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  _value\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  whenNotPaused \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf13 \strokec13 super\cf6 \strokec6 .\cf4 \strokec4 approve\cf6 \strokec6 (\cf4 \strokec4 _spender\cf6 \strokec6 ,\cf4 \strokec4  _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  increaseApproval\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _spender\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  _addedValue\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  whenNotPaused \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf4 \strokec4  success\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf13 \strokec13 super\cf6 \strokec6 .\cf4 \strokec4 increaseApproval\cf6 \strokec6 (\cf4 \strokec4 _spender\cf6 \strokec6 ,\cf4 \strokec4  _addedValue\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 function\cf4 \strokec4  decreaseApproval\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _spender\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  _subtractedValue\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  whenNotPaused \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf4 \strokec4  success\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf13 \strokec13 super\cf6 \strokec6 .\cf4 \strokec4 decreaseApproval\cf6 \strokec6 (\cf4 \strokec4 _spender\cf6 \strokec6 ,\cf4 \strokec4  _subtractedValue\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 function\cf4 \strokec4  blackListAddress\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  listAddress\cf6 \strokec6 ,\cf4 \strokec4   \cf5 \strokec5 bool\cf4 \strokec4  isBlackListed\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  whenNotPaused onlyOwner  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 bool\cf4 \strokec4  success\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf13 \strokec13 super\cf6 \strokec6 .\cf4 \strokec4 _blackList\cf6 \strokec6 (\cf4 \strokec4 listAddress\cf6 \strokec6 ,\cf4 \strokec4  isBlackListed\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  BorToken  \cf5 \strokec5 is\cf4 \strokec4  PausableToken \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 string\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  name\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 string\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  symbol\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  decimals\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Mint\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  \cf10 \strokec10 indexed\cf4 \strokec4  from\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf10 \strokec10 indexed\cf4 \strokec4  to\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Burn\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  \cf10 \strokec10 indexed\cf4 \strokec4  burner\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3     \cb1 \
\cb3     \cf14 \strokec14 constructor\cf6 \strokec6 (\cf5 \strokec5 string\cf4 \strokec4  \cf15 \strokec15 memory\cf4 \strokec4  _name\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 string\cf4 \strokec4  \cf15 \strokec15 memory\cf4 \strokec4  _symbol\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  _decimals\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  _supply\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  tokenOwner\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         name \cf6 \strokec6 =\cf4 \strokec4  _name\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         symbol \cf6 \strokec6 =\cf4 \strokec4  _symbol\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         decimals \cf6 \strokec6 =\cf4 \strokec4  _decimals\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         totalSupply \cf6 \strokec6 =\cf4 \strokec4  _supply \cf6 \strokec6 *\cf4 \strokec4  \cf7 \strokec7 10\cf4 \strokec4 **_decimals\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         balances\cf6 \strokec6 [\cf4 \strokec4 tokenOwner\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  totalSupply\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         owner \cf6 \strokec6 =\cf4 \strokec4  tokenOwner\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  Transfer\cf6 \strokec6 (\cf5 \strokec5 address\cf6 \strokec6 (\cf7 \strokec7 0\cf6 \strokec6 ),\cf4 \strokec4  tokenOwner\cf6 \strokec6 ,\cf4 \strokec4  totalSupply\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  burn\cf6 \strokec6 (\cf5 \strokec5 uint256\cf4 \strokec4  _value\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         _burn\cf6 \strokec6 (\cf11 \strokec11 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ,\cf4 \strokec4  _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _burn\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  _who\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  _value\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf6 \strokec6 (\cf4 \strokec4 _value \cf6 \strokec6 <=\cf4 \strokec4  balances\cf6 \strokec6 [\cf4 \strokec4 _who\cf6 \strokec6 ]);\cf4 \cb1 \strokec4 \
\cb3         balances\cf6 \strokec6 [\cf4 \strokec4 _who\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  balances\cf6 \strokec6 [\cf4 \strokec4 _who\cf6 \strokec6 ].\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         totalSupply \cf6 \strokec6 =\cf4 \strokec4  totalSupply\cf6 \strokec6 .\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  Burn\cf6 \strokec6 (\cf4 \strokec4 _who\cf6 \strokec6 ,\cf4 \strokec4  _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  Transfer\cf6 \strokec6 (\cf4 \strokec4 _who\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 address\cf6 \strokec6 (\cf7 \strokec7 0\cf6 \strokec6 ),\cf4 \strokec4  _value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  mint\cf6 \strokec6 (\cf5 \strokec5 address\cf4 \strokec4  account\cf6 \strokec6 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  onlyOwner \cf8 \strokec8 public\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\
\cb3         totalSupply \cf6 \strokec6 =\cf4 \strokec4  totalSupply\cf6 \strokec6 .\cf4 \strokec4 add\cf6 \strokec6 (\cf4 \strokec4 amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         balances\cf6 \strokec6 [\cf4 \strokec4 account\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  balances\cf6 \strokec6 [\cf4 \strokec4 account\cf6 \strokec6 ].\cf4 \strokec4 add\cf6 \strokec6 (\cf4 \strokec4 amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  Mint\cf6 \strokec6 (\cf5 \strokec5 address\cf6 \strokec6 (\cf7 \strokec7 0\cf6 \strokec6 ),\cf4 \strokec4  account\cf6 \strokec6 ,\cf4 \strokec4  amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  Transfer\cf6 \strokec6 (\cf5 \strokec5 address\cf6 \strokec6 (\cf7 \strokec7 0\cf6 \strokec6 ),\cf4 \strokec4  account\cf6 \strokec6 ,\cf4 \strokec4  amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
}